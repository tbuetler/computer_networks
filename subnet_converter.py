#!/usr/bin/env python3
import ipaddress

def ben√∂tigte_cidr(hosts):
    """ Berechnet die kleinste Subnetzmaske (CIDR), die genug Hosts aufnehmen kann """
    for cidr in range(30, 0, -1):  # /30 ist das kleinste sinnvolle Subnetz
        if (2 ** (32 - cidr)) - 2 >= hosts:
            return cidr
    return None  # Falls keine passende Maske existiert

def subnetting(netzwerk, host_list):
    """ Erstellt Subnetze f√ºr die ben√∂tigten Host-Anzahlen """
    net = ipaddress.ip_network(netzwerk, strict=False)
    host_list.sort(reverse=True)  # Gr√∂√üte zuerst

    subnets = []
    start_ip = net.network_address
    remaining_ips = net.num_addresses  # Verbleibende IPs berechnen

    for hosts in host_list:
        cidr = ben√∂tigte_cidr(hosts)
        if cidr is None:
            print(f"‚ùå Fehler: {hosts} Hosts passen nicht ins Netzwerk.")
            continue
        
        subnet = ipaddress.ip_network(f"{start_ip}/{cidr}", strict=False)
        subnets.append((subnet, hosts))

        # N√§chstes freie Subnetz berechnen
        start_ip = subnet.broadcast_address + 1
        remaining_ips -= subnet.num_addresses  # Verbleibende IPs anpassen

        if start_ip > net.broadcast_address:
            print("‚ö†Ô∏è Keine weiteren IP-Adressen verf√ºgbar.")
            break

    return subnets, remaining_ips

def m√∂gliche_subnetze(remaining_ips):
    """ Berechnet, wie viele /30-Subnetze noch m√∂glich w√§ren """
    if remaining_ips < 4:
        return 0
    return remaining_ips // 4  # /30 hat immer 4 IPs

def main():
    netzwerk = input("Gib die IPv4-Adresse mit Pr√§fix (z.B. 193.5.86.0/24) ein: ").strip()
    hosts_input = input("Gib die ben√∂tigten Hosts als Liste an (z.B. 4,12,17,67): ").strip()

    try:
        host_liste = list(map(int, hosts_input.split(",")))
    except ValueError:
        print("‚ùå Fehler: Die Eingabe muss eine kommagetrennte Liste von Zahlen sein.")
        return

    try:
        ip_net = ipaddress.ip_network(netzwerk, strict=False)
    except ValueError:
        print("‚ùå Fehler: Ung√ºltige Netzwerkadresse.")
        return

    print("\nüìä Netzwerkinformationen:")
    print(f"üåç Netzwerkadresse: {netzwerk}")
    print(f"üìè Verf√ºgbare IPs: {ip_net.num_addresses}")

    subnets, remaining_ips = subnetting(netzwerk, host_liste)

    if not subnets:
        print("‚ùå Fehler: Keine passenden Subnetze gefunden.")
        return

    print("\nüìä Berechnete Subnetze:")
    for i, (subnet, hosts) in enumerate(subnets, start=1):
        print(f"\nüîπ **Subnetz {i}:**")
        print(f"   üåê Netzwerk-Adresse: {subnet.network_address}")
        print(f"   üìè Netmask: {subnet.netmask}")
        print(f"   üî¢ CIDR-Notation: /{subnet.prefixlen}")
        print(f"   üíª Ben√∂tigte Hosts: {hosts}")
        print(f"   üè† Erster Host: {subnet.network_address + 1}")
        print(f"   üè† Letzter Host: {subnet.broadcast_address - 1}")
        print(f"   üì¢ Broadcast-Adresse: {subnet.broadcast_address}")

    # Berechnung der noch m√∂glichen Subnetze
    freie_subnetze = m√∂gliche_subnetze(remaining_ips)
    print("\nüìä **Zus√§tzliche Subnetze m√∂glich**")
    print(f"   üèóÔ∏è Verbleibende IPs: {remaining_ips}")
    print(f"   üè† Anzahl zus√§tzlicher /30-Subnetze: {freie_subnetze}")

if __name__ == "__main__":
    main()
